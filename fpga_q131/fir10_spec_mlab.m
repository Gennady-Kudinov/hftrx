%                                                                                                          
%THIS IS A WIZARD GENERATED FILE. DO NOT EDIT THIS FILE!                                                   
%                                                                                                          
%--------------------------------------------------------------------------------------------------------- 
%This Model Only Support Single Channel Input Data. 
%Please input:                                      
%data vector: 		stimulation(1:n)                
%FILTER PARAMETER  
%Input Data Width: 32
%Decimation Factor: 10
%MSB Truncated Bits:
%MSB Satuated Bits :
%LSB Truncated bits:
%LSB Rounded bits  :
%FIR Width (Full Calculation Width Before Output Width Adjust) :32 
%-----------------------------------------------------------------------------------------------------------
%MegaWizard Scaled Coefficient Values
 function  output = fir10_spec_mlab(stimulation, output);
 coef_matrix=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,20,21,21,19,0,0,0,0,-21,-32,-41,-47,-51,-50,-45,-35,-21,0,0,37,57,74,87,94,94,86,70,46,0,-17,-52,-86,-116,-140,-153,-155,-145,-121,-86,-41,0,65,119,167,205,229,236,225,194,146,83,0,-71,-150,-223,-282,-322,-339,-329,-293,-231,-146,-45,66,178,282,370,433,465,462,422,346,238,105,-43,-195,-340,-466,-561,-616,-625,-585,-496,-363,-195,0,198,394,567,705,792,822,787,689,531,325,83,-177,-434,-668,-860,-993,-1053,-1032,-929,-748,-500,-202,125,456,765,1026,1218,1321,1325,1224,1023,733,373,-30,-447,-846,-1193,-1461,-1624,-1665,-1577,-1361,-1030,-605,-117,400,905,1358,1721,1962,2058,1996,1775,1407,914,332,-297,-926,-1505,-1986,-2328,-2500,-2481,-2267,-1868,-1308,-626,129,900,1627,2252,2721,2993,3040,2850,2430,1806,1019,127,-805,-1705,-2500,-3126,-3527,-3665,-3521,-3096,-2415,-1522,-482,629,1726,2723,3539,4103,4364,4292,3882,3155,2160,964,-343,-1664,-2895,-3937,-4702,-5124,-5157,-4788,-4033,-2941,-1586,-67,1503,3002,4310,5321,5945,6123,5828,5070,3893,2379,635,-1209,-3011,-4629,-5932,-6808,-7178,-6998,-6266,-5024,-3355,-1378,763,2904,4877,6525,7710,8325,8308,7642,6362,4551,2336,-122,-2637,-5014,-7064,-8618,-9542,-9746,-9195,-7912,-5978,-3527,-735,2189,5019,7532,9525,10828,11320,10944,9704,7676,4997,1860,-1504,-4838,-7881,-10388,-12149,-13009,-12877,-11739,-9656,-6767,-3278,556,4445,8086,11190,13500,14818,15015,14047,11961,8891,5051,722,-3772,-8084,-11875,-14835,-16714,-17338,-16627,-14603,-11391,-7212,-2367,2782,7843,12419,16142,18700,19866,19514,17634,14334,9838,4464,-1390,-7280,-12749,-17360,-20734,-22576,-22706,-21071,-17755,-12974,-7065,-459,6346,12827,18469,22814,25491,26251,24985,21743,16728,10285,2881,-4932,-12556,-19394,-24893,-28592,-30157,-29413,-26361,-21178,-14214,-5967,2955,11875,20098,26967,31912,34499,34467,31750,26489,19029,9893,-252,-10644,-20480,-28980,-35447,-39324,-40241,-38046,-32828,-24911,-14837,-3333,8745,20474,30931,39267,44774,46946,45519,40503,32186,21122,8093,-5943,-19925,-32761,-43419,-51006,-54839,-54508,-49913,-41282,-29162,-14391,1965,18682,34471,48072,58358,64419,65646,61784,52964,39707,22892,3707,-16435,-36002,-53448,-67340,-76467,-79944,-77290,-68482,-53971,-34667,-11885,12738,37360,60063,79001,92539,99395,98743,90303,74382,51879,24237,-6635,-38490,-68898,-95421,-115795,-128112,-130983,-123664,-106153,-79222,-44408,-3936,39405,82436,121798,154192,176619,186621,182494,163461,129788,82843,25078,-40056,-108277,-174684,-234042,-281079,-310826,-318928,-301958,-257659,-185155,-85062,40466,187794,351944,526816,705489,880551,1044503,1190137,1310935,1401414,1457427,1476390,1457427,1401414,1310935,1190137,1044503,880551,705489,526816,351944,187794,40466,-85062,-185155,-257659,-301958,-318928,-310826,-281079,-234042,-174684,-108277,-40056,25078,82843,129788,163461,182494,186621,176619,154192,121798,82436,39405,-3936,-44408,-79222,-106153,-123664,-130983,-128112,-115795,-95421,-68898,-38490,-6635,24237,51879,74382,90303,98743,99395,92539,79001,60063,37360,12738,-11885,-34667,-53971,-68482,-77290,-79944,-76467,-67340,-53448,-36002,-16435,3707,22892,39707,52964,61784,65646,64419,58358,48072,34471,18682,1965,-14391,-29162,-41282,-49913,-54508,-54839,-51006,-43419,-32761,-19925,-5943,8093,21122,32186,40503,45519,46946,44774,39267,30931,20474,8745,-3333,-14837,-24911,-32828,-38046,-40241,-39324,-35447,-28980,-20480,-10644,-252,9893,19029,26489,31750,34467,34499,31912,26967,20098,11875,2955,-5967,-14214,-21178,-26361,-29413,-30157,-28592,-24893,-19394,-12556,-4932,2881,10285,16728,21743,24985,26251,25491,22814,18469,12827,6346,-459,-7065,-12974,-17755,-21071,-22706,-22576,-20734,-17360,-12749,-7280,-1390,4464,9838,14334,17634,19514,19866,18700,16142,12419,7843,2782,-2367,-7212,-11391,-14603,-16627,-17338,-16714,-14835,-11875,-8084,-3772,722,5051,8891,11961,14047,15015,14818,13500,11190,8086,4445,556,-3278,-6767,-9656,-11739,-12877,-13009,-12149,-10388,-7881,-4838,-1504,1860,4997,7676,9704,10944,11320,10828,9525,7532,5019,2189,-735,-3527,-5978,-7912,-9195,-9746,-9542,-8618,-7064,-5014,-2637,-122,2336,4551,6362,7642,8308,8325,7710,6525,4877,2904,763,-1378,-3355,-5024,-6266,-6998,-7178,-6808,-5932,-4629,-3011,-1209,635,2379,3893,5070,5828,6123,5945,5321,4310,3002,1503,-67,-1586,-2941,-4033,-4788,-5157,-5124,-4702,-3937,-2895,-1664,-343,964,2160,3155,3882,4292,4364,4103,3539,2723,1726,629,-482,-1522,-2415,-3096,-3521,-3665,-3527,-3126,-2500,-1705,-805,127,1019,1806,2430,2850,3040,2993,2721,2252,1627,900,129,-626,-1308,-1868,-2267,-2481,-2500,-2328,-1986,-1505,-926,-297,332,914,1407,1775,1996,2058,1962,1721,1358,905,400,-117,-605,-1030,-1361,-1577,-1665,-1624,-1461,-1193,-846,-447,-30,373,733,1023,1224,1325,1321,1218,1026,765,456,125,-202,-500,-748,-929,-1032,-1053,-993,-860,-668,-434,-177,83,325,531,689,787,822,792,705,567,394,198,0,-195,-363,-496,-585,-625,-616,-561,-466,-340,-195,-43,105,238,346,422,462,465,433,370,282,178,66,-45,-146,-231,-293,-329,-339,-322,-282,-223,-150,-71,0,83,146,194,225,236,229,205,167,119,65,0,-41,-86,-121,-145,-155,-153,-140,-116,-86,-52,-17,0,46,70,86,94,94,87,74,57,37,0,0,-21,-35,-45,-50,-51,-47,-41,-32,-21,0,0,0,0,19,21,21,20,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
 INTER_FACTOR  = 1;         
 DECI_FACTOR  =  10;
 MSB_RM  = 2;
 MSB_TYPE  = 0;
 LSB_RM  = 24;
 LSB_TYPE  = 0;
 FIR_WIDTH  = 32 + MSB_RM + LSB_RM;
 OUT_WIDTH  = 32 ;  %32
  DATA_WIDTH = 32;
 data_type = 1;

 % check size of inputs. 
 [DX,DY] = size(stimulation);
 [CX,CY] = size(coef_matrix); 
 if (CX ~= DY * INTER_FACTOR) 
    fprintf('WARNING : coef_matrix size and input data size is not match\n'); 
 end 
   
 %fill coef_matrix to length of data with the latest coef set 
 if (CX < DY * INTER_FACTOR) 
   for i= CX +1:DY * INTER_FACTOR 
     coef_matrix(i,:) = coef_matrix(CX,:); 
   end 
 end
  
        %check if input is integer 
       	int_sti=round(stimulation); 
	    T = (int_sti ~= stimulation); 
	    if (max(T)~=0) 
	        fprintf('WARNING : Integer Input Expected: Rounding Fractional Input to Nearest Integer...\n'); 
	    end 
	     
	    %Input overflow check 
	    switch  data_type 
	    case 1 
	        %set max/min for signed 
	        maxdat = 2^(DATA_WIDTH-1)-1; 
	        mindat = -maxdat-1; 
	    case 2 
	        %set max/min for unsigned 
	        maxdat = 2^DATA_WIDTH-1; 
	        mindat = 0; 
	    end 

	    if(data_type == 2)
	    	if(abs(coef_matrix) == coef_matrix)
	    		FIR_WIDTH = FIR_WIDTH +1;
	    	end
	    end

	    %Saturating Input Value 
	    a=find(int_sti>maxdat); 
	    b=find(int_sti<mindat); 
	    if (~isempty(a)|~isempty(b)) 
	 	    fprintf('WARNING : Input Amplitude Exceeds MAXIMUM/MINIMUM allowable values - saturating input values...\n'); 
	            lena = length (a); 
	            lenb = length (b); 
	            for i =1:lena 
	        	    fprintf('%d > %d \n', int_sti(a(i)), maxdat); 
			        int_sti(a(i)) = maxdat; 
		        end 
		    for i =1:lenb 
			    fprintf('%d < %d \n', int_sti(b(i)), mindat); 
			    int_sti(b(i)) = mindat; 
		    end 
	    end 
         
	    % Add interpolation 
   	    inter_sti = zeros(1, INTER_FACTOR * length(int_sti)); 
	    inter_sti(1:INTER_FACTOR:INTER_FACTOR * length(int_sti)) = int_sti; 
 
         
        for i = 1 : DY *INTER_FACTOR 
    	    coef_current = coef_matrix(i,:); 
            output_temp(i) = simp_adaptive (inter_sti, coef_current, i); 
        end 
	% Truncate output 
	len1 = length(output_temp); 
	 
	    switch  LSB_TYPE 
	    case 0 
	        %truncate 
            out_dec = bi_trunc_lsb(output_temp,LSB_RM,FIR_WIDTH); 
	    case 1 
	        %round 
            out_dec = bi_round(output_temp,LSB_RM, FIR_WIDTH); 
	    end 
         
 	    switch  MSB_TYPE 
	    case 0 
	        %truncate 
            out_dec = bi_trunc_msb(out_dec,MSB_RM,FIR_WIDTH-LSB_RM); 
	    case 1 
	        %round 
            out_dec = bi_satu(out_dec,MSB_RM, FIR_WIDTH-LSB_RM); 
	    end 
 	    
    	% choose decimation output in phase=DECI_FACTOR-1  
     	if(DECI_FACTOR == 1) 
     		output = out_dec; 
     	else
     		output = out_dec;%(DECI_FACTOR:DECI_FACTOR:len1);
 	end  
 	       
  	function[output, outindex] = simp_adaptive (int_sti, coef_current, data_index, output) 
	%Simulation is the whole input sequence 
	%coef_current is the current coefficient set 
	%data_index gives the last data to use 
	%outputs are the sum of input and coef multiplication 
	%outindex is the next data_index 
    
	sti_current = zeros(length(coef_current),1); 
	 
	data_length = length(int_sti); 
	 
	%Check data index 
	if (data_index > data_length) 
		fprintf('ERROR: DATA INDEX IS LARGER THAN DATA LENGTH!!!\n'); 
		return; 
	end 
	for i = 1: length(coef_current) 
	   if ((data_index -i+1)>0 & (data_index - i+1)<=data_length) 
	      sti_current(i,1) = int_sti(data_index - i+1); 
	   end 
	end 
	 
	outindex= data_index+1; 
	output = coef_current * sti_current; 
	% end of function simp_adaptive 
 
	function output = bi_round(data_in,LSB_RM,ORI_WIDTH, output) 
	% LSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width
	data = round (data_in / 2^LSB_RM);       
	output = bi_satu(data,0,ORI_WIDTH - LSB_RM); 
	%end of function bi_trunc_lsb 
	 
	function output = bi_trunc_lsb(data_in,LSB_RM,ORI_WIDTH, output) 
	% LSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	output = bitshift(2^ORI_WIDTH*(data_in<0) + data_in, -LSB_RM) - 2^(ORI_WIDTH-LSB_RM) *(data_in<0); 
	% end of function bi_round 
	 
	function output = bi_trunc_msb(data_in,MSB_RM,ORI_WIDTH, output) 
	% MSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	data = 2^ORI_WIDTH * (data_in < 0)+ data_in; 
	erase_num = 2^(ORI_WIDTH - MSB_RM) - 1; 
	data = bitand(data, erase_num); 
	output = data - 2^(ORI_WIDTH - MSB_RM)*(bitget(data,ORI_WIDTH - MSB_RM)); 
	%end of bi_trunc_msb 
	 
	function output = bi_satu(data_in,MSB_RM,ORI_WIDTH, output) 
	% MSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	maxdat = 2^(ORI_WIDTH - MSB_RM - 1)-1; 
	mindat = 2^(ORI_WIDTH - MSB_RM - 1)*(-1); 
	data_in(find(data_in > maxdat)) = maxdat; 
	data_in(find(data_in < mindat)) = mindat; 
	output = data_in; 
	%end of bi_satu  
         
