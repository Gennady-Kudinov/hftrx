%                                                                                                                                       
%THIS IS A WIZARD GENERATED FILE. DO NOT EDIT THIS FILE!                                                                                
%                                                                                                                                       
%---------------------------------------------------------------------------------------------------------                              
%This is a filter withfixed coefficients 
%This Model Only Support Single Channel Input Data. 
%Please input:                                                                                                                          
%data vector: 		stimulation(1:n)                                                                                                 
%                                                                                                                                       
%    This Model Only Support FIR_WIDTH to 51 Bits
%                                                                                                                                       
%FILTER PARAMETER                                                                                                                       
%Input Data Type:	Signed
%Input Data Width:	32
%Decimation Factor:   40
%MSB Truncated Bits: 1
%LSB Truncated bits:22
%FIR Width (Full Calculation Width Before Output Width Adjust) :   55
%-----------------------------------------------------------------------------------------------------------

	%MegaWizard Scaled Coefficient Values
	function  output = fir_40ex_2ch_mlab_mat (stimulation, output)
	coef_matrix=[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -5 -7 -8 -10 -11 -13 -14 -15 -16 -16 -16 -15 -14 -12 -10 -7 0 0 6 12 18 24 30 36 42 47 52 56 60 62 62 61 59 55 49 42 32 22 9 -4 -19 -34 -50 -66 -82 -97 -112 -124 -135 -144 -150 -153 -153 -149 -141 -130 -115 -97 -75 -50 -22 9 41 74 108 142 175 205 234 259 279 295 305 309 307 298 281 258 227 190 146 97 43 -15 -76 -139 -202 -264 -324 -380 -430 -474 -510 -537 -554 -559 -553 -534 -503 -459 -404 -336 -259 -172 -77 25 130 238 346 452 553 647 731 804 862 906 931 938 925 892 838 764 670 558 429 285 129 -36 -208 -383 -558 -727 -889 -1038 -1172 -1286 -1378 -1445 -1483 -1491 -1468 -1414 -1326 -1208 -1058 -881 -677 -451 -207 51 319 590 859 1121 1369 1597 1801 1974 2112 2211 2267 2277 2240 2154 2019 1837 1609 1339 1030 689 321 -68 -469 -875 -1277 -1667 -2035 -2374 -2675 -2931 -3133 -3278 -3358 -3370 -3312 -3183 -2982 -2711 -2374 -1976 -1522 -1021 -481 88 674 1266 1851 2418 2953 3444 3880 4249 4541 4748 4862 4879 4793 4605 4313 3922 3435 2860 2207 1486 709 -107 -948 -1797 -2637 -3448 -4214 -4917 -5540 -6068 -6486 -6782 -6946 -6969 -6848 -6580 -6165 -5608 -4916 -4098 -3167 -2140 -1035 128 1327 2537 3734 4892 5986 6991 7883 8640 9242 9670 9911 9952 9788 9413 8829 8040 7058 5895 4569 3102 1521 -146 -1867 -3609 -5336 -7011 -8598 -10061 -11366 -12479 -13372 -14017 -14392 -14480 -14268 -13750 -12926 -11801 -10387 -8703 -6772 -4626 -2301 163 2721 5323 7917 10451 12869 15117 17142 18893 20323 21388 22052 22282 22056 21356 20177 18519 16393 13822 10835 7472 3783 -175 -4336 -8627 -12968 -17277 -21464 -25440 -29114 -32394 -35193 -37424 -39008 -39871 -39948 -39183 -37529 -34952 -31430 -26955 -21530 -15175 -7921 184 9081 18698 28948 39737 50958 62497 74232 86037 97779 109327 120548 131311 141489 150960 159611 167336 174042 179645 184077 187282 189222 189871 189222 187282 184077 179645 174042 167336 159611 150960 141489 131311 120548 109327 97779 86037 74232 62497 50958 39737 28948 18698 9081 184 -7921 -15175 -21530 -26955 -31430 -34952 -37529 -39183 -39948 -39871 -39008 -37424 -35193 -32394 -29114 -25440 -21464 -17277 -12968 -8627 -4336 -175 3783 7472 10835 13822 16393 18519 20177 21356 22056 22282 22052 21388 20323 18893 17142 15117 12869 10451 7917 5323 2721 163 -2301 -4626 -6772 -8703 -10387 -11801 -12926 -13750 -14268 -14480 -14392 -14017 -13372 -12479 -11366 -10061 -8598 -7011 -5336 -3609 -1867 -146 1521 3102 4569 5895 7058 8040 8829 9413 9788 9952 9911 9670 9242 8640 7883 6991 5986 4892 3734 2537 1327 128 -1035 -2140 -3167 -4098 -4916 -5608 -6165 -6580 -6848 -6969 -6946 -6782 -6486 -6068 -5540 -4917 -4214 -3448 -2637 -1797 -948 -107 709 1486 2207 2860 3435 3922 4313 4605 4793 4879 4862 4748 4541 4249 3880 3444 2953 2418 1851 1266 674 88 -481 -1021 -1522 -1976 -2374 -2711 -2982 -3183 -3312 -3370 -3358 -3278 -3133 -2931 -2675 -2374 -2035 -1667 -1277 -875 -469 -68 321 689 1030 1339 1609 1837 2019 2154 2240 2277 2267 2211 2112 1974 1801 1597 1369 1121 859 590 319 51 -207 -451 -677 -881 -1058 -1208 -1326 -1414 -1468 -1491 -1483 -1445 -1378 -1286 -1172 -1038 -889 -727 -558 -383 -208 -36 129 285 429 558 670 764 838 892 925 938 931 906 862 804 731 647 553 452 346 238 130 25 -77 -172 -259 -336 -404 -459 -503 -534 -553 -559 -554 -537 -510 -474 -430 -380 -324 -264 -202 -139 -76 -15 43 97 146 190 227 258 281 298 307 309 305 295 279 259 234 205 175 142 108 74 41 9 -22 -50 -75 -97 -115 -130 -141 -149 -153 -153 -150 -144 -135 -124 -112 -97 -82 -66 -50 -34 -19 -4 9 22 32 42 49 55 59 61 62 62 60 56 52 47 42 36 30 24 18 12 6 0 0 -7 -10 -12 -14 -15 -16 -16 -16 -15 -14 -13 -11 -10 -8 -7 -5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ];
	INTER_FACTOR  = 1;
	DECI_FACTOR  = 40;
	MSB_RM  = 1;
	MSB_TYPE  = 0;
	LSB_RM  = 22;
	LSB_TYPE  = 0;
	FIR_WIDTH  = 55;
	OUT_WIDTH  = FIR_WIDTH - MSB_RM - LSB_RM ;
	DATA_WIDTH = 32;
            
	data_type= 1;

        % check size of inputs.
        [DX,DY] = size(stimulation);
        [CX,CY] = size(coef_matrix);
        if (CX ~= DY * INTER_FACTOR)
	        fprintf('WARNING : coef_matrix size and input data size is not match\n');
        end
        
        %fill coef_matrix to length of data with the latest coef set
        if (CX < DY * INTER_FACTOR)
            for i= CX +1:DY * INTER_FACTOR
                coef_matrix(i,:) = coef_matrix(CX,:);
            end
        end

        %check if input is integer
       	int_sti=round(stimulation);
	    T = (int_sti ~= stimulation);
	    if (max(T)~=0)
	        fprintf('WARNING : Integer Input Expected: Rounding Fractional Input to Nearest Integer...\n');
	    end
	    
	    %Input overflow check
	    switch  data_type
	    case 1
	        %set max/min for signed
	        maxdat = 2^(DATA_WIDTH-1)-1;
	        mindat = -maxdat-1;
	    case 2
	        %set max/min for unsigned
	        maxdat = 2^DATA_WIDTH-1;
	        mindat = 0;
	    end

	    if(data_type == 2)
	    	if(abs(coef_matrix) == coef_matrix)
	    		FIR_WIDTH = FIR_WIDTH +1;
	    	end
	    end

	    %Saturating Input Value
	    a=find(int_sti>maxdat);
	    b=find(int_sti<mindat);
	    if (~isempty(a)|~isempty(b))
	 	    fprintf('WARNING : Input Amplitude Exceeds MAXIMUM/MINIMUM allowable values - saturating input values...\n');
	            lena = length (a);
	            lenb = length (b);
	            for i =1:lena
	        	    fprintf('%d > %d \n', int_sti(a(i)), maxdat);
			        int_sti(a(i)) = maxdat;
		        end
		    for i =1:lenb
			    fprintf('%d < %d \n', int_sti(b(i)), mindat);
			    int_sti(b(i)) = mindat;
		    end
	    end
        
	    % Add interpolation
   	    inter_sti = zeros(1, INTER_FACTOR * length(int_sti));
	    inter_sti(1:INTER_FACTOR:INTER_FACTOR * length(int_sti)) = int_sti;

        
        for i = 1 : DY *INTER_FACTOR
    	    coef_current = coef_matrix(i,:);
            output_temp(i) = simp_adaptive (inter_sti, coef_current, i);
        end
	% Truncate output
	len1 = length(output_temp);
	
	    switch  LSB_TYPE
	    case 0
	        %truncate
            out_dec = bi_trunc_lsb(output_temp,LSB_RM,FIR_WIDTH);
	    case 1
	        %round
            out_dec = bi_round(output_temp,LSB_RM, FIR_WIDTH);
	    end
        
 	    switch  MSB_TYPE
	    case 0
	        %truncate
            out_dec = bi_trunc_msb(out_dec,MSB_RM,FIR_WIDTH-LSB_RM);
	    case 1
	        %round
            out_dec = bi_satu(out_dec,MSB_RM, FIR_WIDTH-LSB_RM);
	    end
 	   
    	% choose decimation output in phase=DECI_FACTOR-1  
     	if(DECI_FACTOR == 1)
     		output = out_dec;
     	else
     		output = out_dec(DECI_FACTOR:DECI_FACTOR:len1);
 	    end 
 	      
  	function[output, outindex] = simp_adaptive (int_sti, coef_current, data_index, output)
	%Simulation is the whole input sequence
	%coef_current is the current coefficient set
	%data_index gives the last data to use
	%outputs are the sum of input and coef multiplication
	%outindex is the next data_index
   
	sti_current = zeros(length(coef_current),1);
	
	data_length = length(int_sti);
	
	%Check data index
	if (data_index > data_length)
		fprintf('ERROR: DATA INDEX IS LARGER THAN DATA LENGTH!!!\n');
		return;
	end
	for i = 1: length(coef_current)
	   if ((data_index -i+1)>0 & (data_index - i+1)<=data_length)
	      sti_current(i,1) = int_sti(data_index - i+1);
	   end
	end
	
	outindex= data_index+1;
	output = coef_current * sti_current;
	% end of function simp_adaptive

	function output = bi_round(data_in,LSB_RM,ORI_WIDTH, output)
	% LSB_RM is the bit to lose in LSB
	% ORI_WIDTH is the original data width
	data = round (data_in / 2^LSB_RM);
	output = bi_satu(data,0,ORI_WIDTH - LSB_RM);
	%end of function bi_trunc_lsb
	
	function output = bi_trunc_lsb(data_in,LSB_RM,ORI_WIDTH, output)
	% LSB_RM is the bit to lose in LSB
	% ORI_WIDTH is the original data width
	%2's complement system
	output = bitshift(2^ORI_WIDTH*(data_in<0) + data_in, -LSB_RM) - 2^(ORI_WIDTH-LSB_RM) *(data_in<0);
	% end of function bi_round
	
	function output = bi_trunc_msb(data_in,MSB_RM,ORI_WIDTH, output)
	% MSB_RM is the bit to lose in LSB
	% ORI_WIDTH is the original data width
	%2's complement system
	data = 2^ORI_WIDTH * (data_in < 0)+ data_in;
	erase_num = 2^(ORI_WIDTH - MSB_RM) - 1;
	data = bitand(data, erase_num);
	output = data - 2^(ORI_WIDTH - MSB_RM)*(bitget(data,ORI_WIDTH - MSB_RM));
	%end of bi_trunc_msb
	
	function output = bi_satu(data_in,MSB_RM,ORI_WIDTH, output)
	% MSB_RM is the bit to lose in LSB
	% ORI_WIDTH is the original data width
	%2's complement system
	maxdat = 2^(ORI_WIDTH - MSB_RM -1)-1;
	mindat = 2^(ORI_WIDTH - MSB_RM -1)*(-1);
	data_in(find(data_in > maxdat)) = maxdat;
	data_in(find(data_in < mindat)) = mindat;
	output = data_in;
	%end of bi_satu 
