%                                                                                                                                       
%THIS IS A WIZARD GENERATED FILE. DO NOT EDIT THIS FILE!                                                                                
%                                                                                                                                       
%---------------------------------------------------------------------------------------------------------                              
%This is a filter withfixed coefficients 
%This Model Only Support Single Channel Input Data. 
%Please input:                                                                                                                          
%data vector: 		stimulation(1:n)                                                                                                 
%                                                                                                                                       
%    This Model Only Support FIR_WIDTH to 51 Bits
%                                                                                                                                       
%FILTER PARAMETER                                                                                                                       
%Input Data Type:	Signed
%Input Data Width:	32
%Decimation Factor:   10
%MSB Truncated Bits: 2
%LSB Truncated bits:22
%FIR Width (Full Calculation Width Before Output Width Adjust) :   56
%-----------------------------------------------------------------------------------------------------------

	%MegaWizard Scaled Coefficient Values
	function  output = fir_10ex_2ch_mlab_mat (stimulation, output)
	coef_matrix=[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -4 -6 -7 -8 -9 -8 -6 0 0 0 9 14 18 21 23 22 20 15 9 0 -9 -19 -29 -37 -43 -45 -44 -39 -29 -16 0 17 35 52 65 75 78 76 66 49 27 0 -28 -57 -83 -104 -118 -123 -118 -102 -76 -42 0 43 86 125 157 177 183 175 150 112 61 0 -62 -124 -180 -224 -252 -261 -248 -213 -157 -86 0 86 173 250 311 349 359 340 292 215 117 0 -117 -235 -338 -420 -470 -483 -457 -390 -288 -156 0 156 312 449 555 620 637 601 513 377 204 5 -204 -406 -584 -721 -804 -824 -777 -662 -486 -262 -6 263 521 748 923 1028 1053 991 843 619 333 7 -333 -660 -947 -1166 -1298 -1327 -1247 -1060 -777 -418 -8 418 828 1185 1458 1621 1656 1555 1320 967 519 10 -519 -1026 -1468 -1805 -2005 -2046 -1919 -1628 -1191 -638 -11 640 1262 1804 2215 2459 2507 2350 1992 1456 779 14 -781 -1540 -2198 -2698 -2993 -3050 -2856 -2419 -1766 -944 -15 948 1867 2663 3266 3621 3687 3451 2922 2132 1139 17 -1144 -2250 -3207 -3932 -4356 -4434 -4148 -3510 -2559 -1366 -19 1375 2701 3848 4715 5222 5313 4969 4202 3063 1633 21 -1645 -3231 -4601 -5636 -6240 -6347 -5934 -5017 -3656 -1947 -23 1967 3859 5494 6729 7448 7576 7082 5987 4362 2323 25 -2349 -4608 -6560 -8034 -8893 -9046 -8457 -7149 -5208 -2772 -26 2813 5515 7851 9618 10649 10835 10132 8569 6244 3324 29 -3381 -6630 -9443 -11573 -12821 -13053 -12214 -10336 -7536 -4012 -30 4099 8040 11460 14058 15590 15889 14884 12610 9204 4905 32 -5034 -9884 -14109 -17335 -19256 -19660 -18450 -15660 -11451 -6112 -33 6318 12427 17781 21904 24398 24981 23516 20022 14689 7864 35 -8206 -16201 -23278 -28804 -32236 -33172 -31391 -26876 -19831 -10678 -35 11323 22510 32595 40672 45930 47722 45626 39496 29489 16076 37 -17581 -35510 -52334 -66580 -76806 -81699 -80172 -71440 -55095 -31144 -36 37348 79723 125463 172678 219318 263282 302532 335216 359765 374991 380150 374991 359765 335216 302532 263282 219318 172678 125463 79723 37348 -36 -31144 -55095 -71440 -80172 -81699 -76806 -66580 -52334 -35510 -17581 37 16076 29489 39496 45626 47722 45930 40672 32595 22510 11323 -35 -10678 -19831 -26876 -31391 -33172 -32236 -28804 -23278 -16201 -8206 35 7864 14689 20022 23516 24981 24398 21904 17781 12427 6318 -33 -6112 -11451 -15660 -18450 -19660 -19256 -17335 -14109 -9884 -5034 32 4905 9204 12610 14884 15889 15590 14058 11460 8040 4099 -30 -4012 -7536 -10336 -12214 -13053 -12821 -11573 -9443 -6630 -3381 29 3324 6244 8569 10132 10835 10649 9618 7851 5515 2813 -26 -2772 -5208 -7149 -8457 -9046 -8893 -8034 -6560 -4608 -2349 25 2323 4362 5987 7082 7576 7448 6729 5494 3859 1967 -23 -1947 -3656 -5017 -5934 -6347 -6240 -5636 -4601 -3231 -1645 21 1633 3063 4202 4969 5313 5222 4715 3848 2701 1375 -19 -1366 -2559 -3510 -4148 -4434 -4356 -3932 -3207 -2250 -1144 17 1139 2132 2922 3451 3687 3621 3266 2663 1867 948 -15 -944 -1766 -2419 -2856 -3050 -2993 -2698 -2198 -1540 -781 14 779 1456 1992 2350 2507 2459 2215 1804 1262 640 -11 -638 -1191 -1628 -1919 -2046 -2005 -1805 -1468 -1026 -519 10 519 967 1320 1555 1656 1621 1458 1185 828 418 -8 -418 -777 -1060 -1247 -1327 -1298 -1166 -947 -660 -333 7 333 619 843 991 1053 1028 923 748 521 263 -6 -262 -486 -662 -777 -824 -804 -721 -584 -406 -204 5 204 377 513 601 637 620 555 449 312 156 0 -156 -288 -390 -457 -483 -470 -420 -338 -235 -117 0 117 215 292 340 359 349 311 250 173 86 0 -86 -157 -213 -248 -261 -252 -224 -180 -124 -62 0 61 112 150 175 183 177 157 125 86 43 0 -42 -76 -102 -118 -123 -118 -104 -83 -57 -28 0 27 49 66 76 78 75 65 52 35 17 0 -16 -29 -39 -44 -45 -43 -37 -29 -19 -9 0 9 15 20 22 23 21 18 14 9 0 0 0 -6 -8 -9 -8 -7 -6 -4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ];
	INTER_FACTOR  = 1;
	DECI_FACTOR  = 10;
	MSB_RM  = 2;
	MSB_TYPE  = 0;
	LSB_RM  = 22;
	LSB_TYPE  = 0;
	FIR_WIDTH  = 56;
	OUT_WIDTH  = FIR_WIDTH - MSB_RM - LSB_RM ;
	DATA_WIDTH = 32;
            
	data_type= 1;

        % check size of inputs.
        [DX,DY] = size(stimulation);
        [CX,CY] = size(coef_matrix);
        if (CX ~= DY * INTER_FACTOR)
	        fprintf('WARNING : coef_matrix size and input data size is not match\n');
        end
        
        %fill coef_matrix to length of data with the latest coef set
        if (CX < DY * INTER_FACTOR)
            for i= CX +1:DY * INTER_FACTOR
                coef_matrix(i,:) = coef_matrix(CX,:);
            end
        end

        %check if input is integer
       	int_sti=round(stimulation);
	    T = (int_sti ~= stimulation);
	    if (max(T)~=0)
	        fprintf('WARNING : Integer Input Expected: Rounding Fractional Input to Nearest Integer...\n');
	    end
	    
	    %Input overflow check
	    switch  data_type
	    case 1
	        %set max/min for signed
	        maxdat = 2^(DATA_WIDTH-1)-1;
	        mindat = -maxdat-1;
	    case 2
	        %set max/min for unsigned
	        maxdat = 2^DATA_WIDTH-1;
	        mindat = 0;
	    end

	    if(data_type == 2)
	    	if(abs(coef_matrix) == coef_matrix)
	    		FIR_WIDTH = FIR_WIDTH +1;
	    	end
	    end

	    %Saturating Input Value
	    a=find(int_sti>maxdat);
	    b=find(int_sti<mindat);
	    if (~isempty(a)|~isempty(b))
	 	    fprintf('WARNING : Input Amplitude Exceeds MAXIMUM/MINIMUM allowable values - saturating input values...\n');
	            lena = length (a);
	            lenb = length (b);
	            for i =1:lena
	        	    fprintf('%d > %d \n', int_sti(a(i)), maxdat);
			        int_sti(a(i)) = maxdat;
		        end
		    for i =1:lenb
			    fprintf('%d < %d \n', int_sti(b(i)), mindat);
			    int_sti(b(i)) = mindat;
		    end
	    end
        
	    % Add interpolation
   	    inter_sti = zeros(1, INTER_FACTOR * length(int_sti));
	    inter_sti(1:INTER_FACTOR:INTER_FACTOR * length(int_sti)) = int_sti;

        
        for i = 1 : DY *INTER_FACTOR
    	    coef_current = coef_matrix(i,:);
            output_temp(i) = simp_adaptive (inter_sti, coef_current, i);
        end
	% Truncate output
	len1 = length(output_temp);
	
	    switch  LSB_TYPE
	    case 0
	        %truncate
            out_dec = bi_trunc_lsb(output_temp,LSB_RM,FIR_WIDTH);
	    case 1
	        %round
            out_dec = bi_round(output_temp,LSB_RM, FIR_WIDTH);
	    end
        
 	    switch  MSB_TYPE
	    case 0
	        %truncate
            out_dec = bi_trunc_msb(out_dec,MSB_RM,FIR_WIDTH-LSB_RM);
	    case 1
	        %round
            out_dec = bi_satu(out_dec,MSB_RM, FIR_WIDTH-LSB_RM);
	    end
 	   
    	% choose decimation output in phase=DECI_FACTOR-1  
     	if(DECI_FACTOR == 1)
     		output = out_dec;
     	else
     		output = out_dec(DECI_FACTOR:DECI_FACTOR:len1);
 	    end 
 	      
  	function[output, outindex] = simp_adaptive (int_sti, coef_current, data_index, output)
	%Simulation is the whole input sequence
	%coef_current is the current coefficient set
	%data_index gives the last data to use
	%outputs are the sum of input and coef multiplication
	%outindex is the next data_index
   
	sti_current = zeros(length(coef_current),1);
	
	data_length = length(int_sti);
	
	%Check data index
	if (data_index > data_length)
		fprintf('ERROR: DATA INDEX IS LARGER THAN DATA LENGTH!!!\n');
		return;
	end
	for i = 1: length(coef_current)
	   if ((data_index -i+1)>0 & (data_index - i+1)<=data_length)
	      sti_current(i,1) = int_sti(data_index - i+1);
	   end
	end
	
	outindex= data_index+1;
	output = coef_current * sti_current;
	% end of function simp_adaptive

	function output = bi_round(data_in,LSB_RM,ORI_WIDTH, output)
	% LSB_RM is the bit to lose in LSB
	% ORI_WIDTH is the original data width
	data = round (data_in / 2^LSB_RM);
	output = bi_satu(data,0,ORI_WIDTH - LSB_RM);
	%end of function bi_trunc_lsb
	
	function output = bi_trunc_lsb(data_in,LSB_RM,ORI_WIDTH, output)
	% LSB_RM is the bit to lose in LSB
	% ORI_WIDTH is the original data width
	%2's complement system
	output = bitshift(2^ORI_WIDTH*(data_in<0) + data_in, -LSB_RM) - 2^(ORI_WIDTH-LSB_RM) *(data_in<0);
	% end of function bi_round
	
	function output = bi_trunc_msb(data_in,MSB_RM,ORI_WIDTH, output)
	% MSB_RM is the bit to lose in LSB
	% ORI_WIDTH is the original data width
	%2's complement system
	data = 2^ORI_WIDTH * (data_in < 0)+ data_in;
	erase_num = 2^(ORI_WIDTH - MSB_RM) - 1;
	data = bitand(data, erase_num);
	output = data - 2^(ORI_WIDTH - MSB_RM)*(bitget(data,ORI_WIDTH - MSB_RM));
	%end of bi_trunc_msb
	
	function output = bi_satu(data_in,MSB_RM,ORI_WIDTH, output)
	% MSB_RM is the bit to lose in LSB
	% ORI_WIDTH is the original data width
	%2's complement system
	maxdat = 2^(ORI_WIDTH - MSB_RM -1)-1;
	mindat = 2^(ORI_WIDTH - MSB_RM -1)*(-1);
	data_in(find(data_in > maxdat)) = maxdat;
	data_in(find(data_in < mindat)) = mindat;
	output = data_in;
	%end of bi_satu 
