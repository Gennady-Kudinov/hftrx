%                                                                                                                                       
%THIS IS A WIZARD GENERATED FILE. DO NOT EDIT THIS FILE!                                                                                
%                                                                                                                                       
%---------------------------------------------------------------------------------------------------------                              
%This is a filter withfixed coefficients 
%This Model Only Support Single Channel Input Data. 
%Please input:                                                                                                                          
%data vector: 		stimulation(1:n)                                                                                                 
%                                                                                                                                       
%    This Model Only Support FIR_WIDTH to 51 Bits
%                                                                                                                                       
%FILTER PARAMETER                                                                                                                       
%Input Data Type:	Signed
%Input Data Width:	32
%Decimation Factor:   20
%MSB Truncated Bits: 1
%LSB Truncated bits:22
%FIR Width (Full Calculation Width Before Output Width Adjust) :   55
%-----------------------------------------------------------------------------------------------------------

	%MegaWizard Scaled Coefficient Values
	function  output = fir_20ex_2ch_mlab_mat (stimulation, output)
	coef_matrix=[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -4 -4 0 0 0 0 0 0 0 6 8 11 14 17 20 23 26 28 30 32 32 32 32 30 28 24 19 14 7 0 -8 -17 -26 -36 -46 -56 -65 -74 -82 -88 -94 -98 -100 -100 -98 -93 -86 -77 -65 -51 -35 -17 0 24 47 70 93 116 138 159 178 194 208 218 224 226 223 216 203 186 164 137 105 69 30 -12 -57 -103 -150 -196 -241 -284 -323 -358 -387 -411 -427 -436 -436 -427 -410 -383 -347 -302 -248 -187 -119 -44 34 117 201 285 367 447 521 589 648 697 734 759 769 765 745 710 658 591 509 414 305 186 57 -78 -218 -360 -501 -638 -769 -890 -999 -1092 -1168 -1225 -1259 -1270 -1256 -1217 -1152 -1061 -946 -808 -647 -468 -271 -62 158 383 610 833 1050 1254 1441 1608 1749 1862 1942 1988 1996 1965 1894 1783 1634 1446 1223 967 683 375 48 -292 -639 -986 -1327 -1654 -1961 -2240 -2486 -2692 -2853 -2964 -3020 -3020 -2960 -2841 -2662 -2424 -2130 -1785 -1393 -960 -492 0 511 1028 1544 2047 2528 2975 3380 3733 4025 4248 4397 4464 4447 4343 4150 3870 3506 3061 2541 1955 1311 620 -105 -853 -1609 -2358 -3086 -3779 -4420 -4997 -5495 -5903 -6209 -6405 -6482 -6436 -6264 -5964 -5538 -4991 -4329 -3561 -2699 -1757 -749 306 1390 2482 3561 4607 5598 6512 7330 8033 8602 9024 9284 9373 9282 9009 8551 7912 7099 6120 4990 3725 2345 873 -666 -2244 -3833 -5402 -6919 -8355 -9678 -10859 -11871 -12688 -13288 -13650 -13761 -13608 -13186 -12492 -11531 -10310 -8844 -7151 -5257 -3188 -980 1333 3709 6105 8476 10777 12960 14979 16789 18347 19613 20550 21128 21318 21102 20466 19402 17912 16005 13697 11012 7984 4652 1065 -2724 -6654 -10659 -14669 -18609 -22402 -25971 -29236 -32121 -34550 -36450 -37754 -38401 -38335 -37509 -35885 -33434 -30138 -25989 -20991 -15160 -8522 -1117 7007 15789 25158 35033 45326 55940 66773 77716 88659 99486 110084 120339 130138 139374 147944 155752 162710 168738 173768 177741 180612 182348 182929 182348 180612 177741 173768 168738 162710 155752 147944 139374 130138 120339 110084 99486 88659 77716 66773 55940 45326 35033 25158 15789 7007 -1117 -8522 -15160 -20991 -25989 -30138 -33434 -35885 -37509 -38335 -38401 -37754 -36450 -34550 -32121 -29236 -25971 -22402 -18609 -14669 -10659 -6654 -2724 1065 4652 7984 11012 13697 16005 17912 19402 20466 21102 21318 21128 20550 19613 18347 16789 14979 12960 10777 8476 6105 3709 1333 -980 -3188 -5257 -7151 -8844 -10310 -11531 -12492 -13186 -13608 -13761 -13650 -13288 -12688 -11871 -10859 -9678 -8355 -6919 -5402 -3833 -2244 -666 873 2345 3725 4990 6120 7099 7912 8551 9009 9282 9373 9284 9024 8602 8033 7330 6512 5598 4607 3561 2482 1390 306 -749 -1757 -2699 -3561 -4329 -4991 -5538 -5964 -6264 -6436 -6482 -6405 -6209 -5903 -5495 -4997 -4420 -3779 -3086 -2358 -1609 -853 -105 620 1311 1955 2541 3061 3506 3870 4150 4343 4447 4464 4397 4248 4025 3733 3380 2975 2528 2047 1544 1028 511 0 -492 -960 -1393 -1785 -2130 -2424 -2662 -2841 -2960 -3020 -3020 -2964 -2853 -2692 -2486 -2240 -1961 -1654 -1327 -986 -639 -292 48 375 683 967 1223 1446 1634 1783 1894 1965 1996 1988 1942 1862 1749 1608 1441 1254 1050 833 610 383 158 -62 -271 -468 -647 -808 -946 -1061 -1152 -1217 -1256 -1270 -1259 -1225 -1168 -1092 -999 -890 -769 -638 -501 -360 -218 -78 57 186 305 414 509 591 658 710 745 765 769 759 734 697 648 589 521 447 367 285 201 117 34 -44 -119 -187 -248 -302 -347 -383 -410 -427 -436 -436 -427 -411 -387 -358 -323 -284 -241 -196 -150 -103 -57 -12 30 69 105 137 164 186 203 216 223 226 224 218 208 194 178 159 138 116 93 70 47 24 0 -17 -35 -51 -65 -77 -86 -93 -98 -100 -100 -98 -94 -88 -82 -74 -65 -56 -46 -36 -26 -17 -8 0 7 14 19 24 28 30 32 32 32 32 30 28 26 23 20 17 14 11 8 6 0 0 0 0 0 0 0 -4 -4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ];
	INTER_FACTOR  = 1;
	DECI_FACTOR  = 20;
	MSB_RM  = 1;
	MSB_TYPE  = 0;
	LSB_RM  = 22;
	LSB_TYPE  = 0;
	FIR_WIDTH  = 55;
	OUT_WIDTH  = FIR_WIDTH - MSB_RM - LSB_RM ;
	DATA_WIDTH = 32;
            
	data_type= 1;

        % check size of inputs.
        [DX,DY] = size(stimulation);
        [CX,CY] = size(coef_matrix);
        if (CX ~= DY * INTER_FACTOR)
	        fprintf('WARNING : coef_matrix size and input data size is not match\n');
        end
        
        %fill coef_matrix to length of data with the latest coef set
        if (CX < DY * INTER_FACTOR)
            for i= CX +1:DY * INTER_FACTOR
                coef_matrix(i,:) = coef_matrix(CX,:);
            end
        end

        %check if input is integer
       	int_sti=round(stimulation);
	    T = (int_sti ~= stimulation);
	    if (max(T)~=0)
	        fprintf('WARNING : Integer Input Expected: Rounding Fractional Input to Nearest Integer...\n');
	    end
	    
	    %Input overflow check
	    switch  data_type
	    case 1
	        %set max/min for signed
	        maxdat = 2^(DATA_WIDTH-1)-1;
	        mindat = -maxdat-1;
	    case 2
	        %set max/min for unsigned
	        maxdat = 2^DATA_WIDTH-1;
	        mindat = 0;
	    end

	    if(data_type == 2)
	    	if(abs(coef_matrix) == coef_matrix)
	    		FIR_WIDTH = FIR_WIDTH +1;
	    	end
	    end

	    %Saturating Input Value
	    a=find(int_sti>maxdat);
	    b=find(int_sti<mindat);
	    if (~isempty(a)|~isempty(b))
	 	    fprintf('WARNING : Input Amplitude Exceeds MAXIMUM/MINIMUM allowable values - saturating input values...\n');
	            lena = length (a);
	            lenb = length (b);
	            for i =1:lena
	        	    fprintf('%d > %d \n', int_sti(a(i)), maxdat);
			        int_sti(a(i)) = maxdat;
		        end
		    for i =1:lenb
			    fprintf('%d < %d \n', int_sti(b(i)), mindat);
			    int_sti(b(i)) = mindat;
		    end
	    end
        
	    % Add interpolation
   	    inter_sti = zeros(1, INTER_FACTOR * length(int_sti));
	    inter_sti(1:INTER_FACTOR:INTER_FACTOR * length(int_sti)) = int_sti;

        
        for i = 1 : DY *INTER_FACTOR
    	    coef_current = coef_matrix(i,:);
            output_temp(i) = simp_adaptive (inter_sti, coef_current, i);
        end
	% Truncate output
	len1 = length(output_temp);
	
	    switch  LSB_TYPE
	    case 0
	        %truncate
            out_dec = bi_trunc_lsb(output_temp,LSB_RM,FIR_WIDTH);
	    case 1
	        %round
            out_dec = bi_round(output_temp,LSB_RM, FIR_WIDTH);
	    end
        
 	    switch  MSB_TYPE
	    case 0
	        %truncate
            out_dec = bi_trunc_msb(out_dec,MSB_RM,FIR_WIDTH-LSB_RM);
	    case 1
	        %round
            out_dec = bi_satu(out_dec,MSB_RM, FIR_WIDTH-LSB_RM);
	    end
 	   
    	% choose decimation output in phase=DECI_FACTOR-1  
     	if(DECI_FACTOR == 1)
     		output = out_dec;
     	else
     		output = out_dec(DECI_FACTOR:DECI_FACTOR:len1);
 	    end 
 	      
  	function[output, outindex] = simp_adaptive (int_sti, coef_current, data_index, output)
	%Simulation is the whole input sequence
	%coef_current is the current coefficient set
	%data_index gives the last data to use
	%outputs are the sum of input and coef multiplication
	%outindex is the next data_index
   
	sti_current = zeros(length(coef_current),1);
	
	data_length = length(int_sti);
	
	%Check data index
	if (data_index > data_length)
		fprintf('ERROR: DATA INDEX IS LARGER THAN DATA LENGTH!!!\n');
		return;
	end
	for i = 1: length(coef_current)
	   if ((data_index -i+1)>0 & (data_index - i+1)<=data_length)
	      sti_current(i,1) = int_sti(data_index - i+1);
	   end
	end
	
	outindex= data_index+1;
	output = coef_current * sti_current;
	% end of function simp_adaptive

	function output = bi_round(data_in,LSB_RM,ORI_WIDTH, output)
	% LSB_RM is the bit to lose in LSB
	% ORI_WIDTH is the original data width
	data = round (data_in / 2^LSB_RM);
	output = bi_satu(data,0,ORI_WIDTH - LSB_RM);
	%end of function bi_trunc_lsb
	
	function output = bi_trunc_lsb(data_in,LSB_RM,ORI_WIDTH, output)
	% LSB_RM is the bit to lose in LSB
	% ORI_WIDTH is the original data width
	%2's complement system
	output = bitshift(2^ORI_WIDTH*(data_in<0) + data_in, -LSB_RM) - 2^(ORI_WIDTH-LSB_RM) *(data_in<0);
	% end of function bi_round
	
	function output = bi_trunc_msb(data_in,MSB_RM,ORI_WIDTH, output)
	% MSB_RM is the bit to lose in LSB
	% ORI_WIDTH is the original data width
	%2's complement system
	data = 2^ORI_WIDTH * (data_in < 0)+ data_in;
	erase_num = 2^(ORI_WIDTH - MSB_RM) - 1;
	data = bitand(data, erase_num);
	output = data - 2^(ORI_WIDTH - MSB_RM)*(bitget(data,ORI_WIDTH - MSB_RM));
	%end of bi_trunc_msb
	
	function output = bi_satu(data_in,MSB_RM,ORI_WIDTH, output)
	% MSB_RM is the bit to lose in LSB
	% ORI_WIDTH is the original data width
	%2's complement system
	maxdat = 2^(ORI_WIDTH - MSB_RM -1)-1;
	mindat = 2^(ORI_WIDTH - MSB_RM -1)*(-1);
	data_in(find(data_in > maxdat)) = maxdat;
	data_in(find(data_in < mindat)) = mindat;
	output = data_in;
	%end of bi_satu 
