%                                                                                                          
%THIS IS A WIZARD GENERATED FILE. DO NOT EDIT THIS FILE!                                                   
%                                                                                                          
%--------------------------------------------------------------------------------------------------------- 
%This Model Only Support Single Channel Input Data. 
%Please input:                                      
%data vector: 		stimulation(1:n)                
%FILTER PARAMETER  
%Input Data Width: 32
%Decimation Factor: 20
%MSB Truncated Bits:
%MSB Satuated Bits :
%LSB Truncated bits:
%LSB Rounded bits  :
%FIR Width (Full Calculation Width Before Output Width Adjust) :32 
%-----------------------------------------------------------------------------------------------------------
%MegaWizard Scaled Coefficient Values
 function  output = fir_20ex_2ch_mlab(stimulation, output);
 coef_matrix=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-20,-24,-29,-33,-37,-40,-42,-44,-45,-45,-43,-40,-35,-29,-22,0,0,0,22,36,51,65,80,94,107,119,129,137,143,146,146,142,135,124,110,92,70,45,0,0,-46,-80,-115,-150,-184,-216,-246,-272,-294,-312,-323,-329,-327,-319,-303,-279,-248,-210,-164,-113,-56,0,71,138,207,275,340,403,460,511,553,587,609,620,619,604,576,534,479,411,331,240,139,31,-84,-203,-323,-442,-557,-667,-767,-857,-933,-992,-1034,-1057,-1058,-1037,-994,-929,-841,-732,-602,-455,-292,-116,71,264,459,654,843,1023,1189,1337,1464,1566,1640,1684,1694,1670,1610,1515,1385,1221,1026,802,553,283,0,-301,-604,-905,-1200,-1481,-1742,-1977,-2181,-2347,-2472,-2550,-2579,-2557,-2481,-2351,-2169,-1936,-1655,-1330,-967,-571,-149,291,740,1190,1631,2054,2449,2809,3123,3384,3585,3720,3784,3773,3684,3518,3274,2956,2567,2113,1601,1040,440,-189,-834,-1483,-2123,-2740,-3321,-3852,-4323,-4720,-5034,-5255,-5377,-5393,-5301,-5098,-4785,-4365,-3844,-3229,-2530,-1758,-927,-52,850,1762,2666,3543,4374,5141,5827,6414,6890,7240,7453,7522,7441,7206,6820,6283,5605,4793,3862,2825,1702,513,-720,-1974,-3223,-4442,-5606,-6689,-7667,-8517,-9219,-9754,-10106,-10264,-10220,-9967,-9507,-8841,-7979,-6933,-5717,-4354,-2865,-1279,377,2069,3765,5431,7032,8534,9904,11110,12125,12922,13480,13781,13812,13565,13038,12235,11164,9840,8283,6518,4576,2492,302,-1950,-4222,-6467,-8640,-10696,-12589,-14277,-15722,-16887,-17742,-18261,-18426,-18225,-17651,-16707,-15402,-13754,-11787,-9532,-7027,-4317,-1451,1518,4533,7533,10458,13247,15841,18183,20219,21900,23183,24033,24420,24327,23742,22664,21103,19077,16616,13757,10549,7046,3311,-586,-4572,-8568,-12496,-16273,-19821,-23062,-25923,-28337,-30244,-31593,-32341,-32458,-31926,-30737,-28899,-26431,-23366,-19749,-15640,-11106,-6228,-1093,4201,9554,14859,20010,24898,29419,33473,36964,39808,41931,43269,43774,43412,42167,40038,37043,33217,28612,23299,17362,10903,4034,-3119,-10421,-17732,-24906,-31795,-38254,-44141,-49320,-53668,-57070,-59429,-60667,-60721,-59553,-57147,-53509,-48672,-42691,-35646,-27642,-18805,-9280,768,11157,21694,32177,42396,52138,61194,69358,76436,82246,86623,89424,90530,89849,87321,82917,76643,68539,58684,47189,34205,19914,4532,-11697,-28499,-45578,-62621,-79296,-95265,-110182,-123704,-135493,-145222,-152583,-157290,-159083,-157737,-153062,-144911,-133180,-117812,-98801,-76189,-50071,-20595,12045,47601,85784,126259,168651,212552,257524,303106,348815,394162,438650,481785,523078,562060,598282,631322,660792,686349,707688,724554,736748,744123,746593,744123,736748,724554,707688,686349,660792,631322,598282,562060,523078,481785,438650,394162,348815,303106,257524,212552,168651,126259,85784,47601,12045,-20595,-50071,-76189,-98801,-117812,-133180,-144911,-153062,-157737,-159083,-157290,-152583,-145222,-135493,-123704,-110182,-95265,-79296,-62621,-45578,-28499,-11697,4532,19914,34205,47189,58684,68539,76643,82917,87321,89849,90530,89424,86623,82246,76436,69358,61194,52138,42396,32177,21694,11157,768,-9280,-18805,-27642,-35646,-42691,-48672,-53509,-57147,-59553,-60721,-60667,-59429,-57070,-53668,-49320,-44141,-38254,-31795,-24906,-17732,-10421,-3119,4034,10903,17362,23299,28612,33217,37043,40038,42167,43412,43774,43269,41931,39808,36964,33473,29419,24898,20010,14859,9554,4201,-1093,-6228,-11106,-15640,-19749,-23366,-26431,-28899,-30737,-31926,-32458,-32341,-31593,-30244,-28337,-25923,-23062,-19821,-16273,-12496,-8568,-4572,-586,3311,7046,10549,13757,16616,19077,21103,22664,23742,24327,24420,24033,23183,21900,20219,18183,15841,13247,10458,7533,4533,1518,-1451,-4317,-7027,-9532,-11787,-13754,-15402,-16707,-17651,-18225,-18426,-18261,-17742,-16887,-15722,-14277,-12589,-10696,-8640,-6467,-4222,-1950,302,2492,4576,6518,8283,9840,11164,12235,13038,13565,13812,13781,13480,12922,12125,11110,9904,8534,7032,5431,3765,2069,377,-1279,-2865,-4354,-5717,-6933,-7979,-8841,-9507,-9967,-10220,-10264,-10106,-9754,-9219,-8517,-7667,-6689,-5606,-4442,-3223,-1974,-720,513,1702,2825,3862,4793,5605,6283,6820,7206,7441,7522,7453,7240,6890,6414,5827,5141,4374,3543,2666,1762,850,-52,-927,-1758,-2530,-3229,-3844,-4365,-4785,-5098,-5301,-5393,-5377,-5255,-5034,-4720,-4323,-3852,-3321,-2740,-2123,-1483,-834,-189,440,1040,1601,2113,2567,2956,3274,3518,3684,3773,3784,3720,3585,3384,3123,2809,2449,2054,1631,1190,740,291,-149,-571,-967,-1330,-1655,-1936,-2169,-2351,-2481,-2557,-2579,-2550,-2472,-2347,-2181,-1977,-1742,-1481,-1200,-905,-604,-301,0,283,553,802,1026,1221,1385,1515,1610,1670,1694,1684,1640,1566,1464,1337,1189,1023,843,654,459,264,71,-116,-292,-455,-602,-732,-841,-929,-994,-1037,-1058,-1057,-1034,-992,-933,-857,-767,-667,-557,-442,-323,-203,-84,31,139,240,331,411,479,534,576,604,619,620,609,587,553,511,460,403,340,275,207,138,71,0,-56,-113,-164,-210,-248,-279,-303,-319,-327,-329,-323,-312,-294,-272,-246,-216,-184,-150,-115,-80,-46,0,0,45,70,92,110,124,135,142,146,146,143,137,129,119,107,94,80,65,51,36,22,0,0,0,-22,-29,-35,-40,-43,-45,-45,-44,-42,-40,-37,-33,-29,-24,-20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
 INTER_FACTOR  = 1;         
 DECI_FACTOR  =  20;
 MSB_RM  = 1;
 MSB_TYPE  = 0;
 LSB_RM  = 24;
 LSB_TYPE  = 0;
 FIR_WIDTH  = 32 + MSB_RM + LSB_RM;
 OUT_WIDTH  = 32 ;  %32
  DATA_WIDTH = 32;
 data_type = 1;

 % check size of inputs. 
 [DX,DY] = size(stimulation);
 [CX,CY] = size(coef_matrix); 
 if (CX ~= DY * INTER_FACTOR) 
    fprintf('WARNING : coef_matrix size and input data size is not match\n'); 
 end 
   
 %fill coef_matrix to length of data with the latest coef set 
 if (CX < DY * INTER_FACTOR) 
   for i= CX +1:DY * INTER_FACTOR 
     coef_matrix(i,:) = coef_matrix(CX,:); 
   end 
 end
  
        %check if input is integer 
       	int_sti=round(stimulation); 
	    T = (int_sti ~= stimulation); 
	    if (max(T)~=0) 
	        fprintf('WARNING : Integer Input Expected: Rounding Fractional Input to Nearest Integer...\n'); 
	    end 
	     
	    %Input overflow check 
	    switch  data_type 
	    case 1 
	        %set max/min for signed 
	        maxdat = 2^(DATA_WIDTH-1)-1; 
	        mindat = -maxdat-1; 
	    case 2 
	        %set max/min for unsigned 
	        maxdat = 2^DATA_WIDTH-1; 
	        mindat = 0; 
	    end 

	    if(data_type == 2)
	    	if(abs(coef_matrix) == coef_matrix)
	    		FIR_WIDTH = FIR_WIDTH +1;
	    	end
	    end

	    %Saturating Input Value 
	    a=find(int_sti>maxdat); 
	    b=find(int_sti<mindat); 
	    if (~isempty(a)|~isempty(b)) 
	 	    fprintf('WARNING : Input Amplitude Exceeds MAXIMUM/MINIMUM allowable values - saturating input values...\n'); 
	            lena = length (a); 
	            lenb = length (b); 
	            for i =1:lena 
	        	    fprintf('%d > %d \n', int_sti(a(i)), maxdat); 
			        int_sti(a(i)) = maxdat; 
		        end 
		    for i =1:lenb 
			    fprintf('%d < %d \n', int_sti(b(i)), mindat); 
			    int_sti(b(i)) = mindat; 
		    end 
	    end 
         
	    % Add interpolation 
   	    inter_sti = zeros(1, INTER_FACTOR * length(int_sti)); 
	    inter_sti(1:INTER_FACTOR:INTER_FACTOR * length(int_sti)) = int_sti; 
 
         
        for i = 1 : DY *INTER_FACTOR 
    	    coef_current = coef_matrix(i,:); 
            output_temp(i) = simp_adaptive (inter_sti, coef_current, i); 
        end 
	% Truncate output 
	len1 = length(output_temp); 
	 
	    switch  LSB_TYPE 
	    case 0 
	        %truncate 
            out_dec = bi_trunc_lsb(output_temp,LSB_RM,FIR_WIDTH); 
	    case 1 
	        %round 
            out_dec = bi_round(output_temp,LSB_RM, FIR_WIDTH); 
	    end 
         
 	    switch  MSB_TYPE 
	    case 0 
	        %truncate 
            out_dec = bi_trunc_msb(out_dec,MSB_RM,FIR_WIDTH-LSB_RM); 
	    case 1 
	        %round 
            out_dec = bi_satu(out_dec,MSB_RM, FIR_WIDTH-LSB_RM); 
	    end 
 	    
    	% choose decimation output in phase=DECI_FACTOR-1  
     	if(DECI_FACTOR == 1) 
     		output = out_dec; 
     	else
     		output = out_dec;%(DECI_FACTOR:DECI_FACTOR:len1);
 	end  
 	       
  	function[output, outindex] = simp_adaptive (int_sti, coef_current, data_index, output) 
	%Simulation is the whole input sequence 
	%coef_current is the current coefficient set 
	%data_index gives the last data to use 
	%outputs are the sum of input and coef multiplication 
	%outindex is the next data_index 
    
	sti_current = zeros(length(coef_current),1); 
	 
	data_length = length(int_sti); 
	 
	%Check data index 
	if (data_index > data_length) 
		fprintf('ERROR: DATA INDEX IS LARGER THAN DATA LENGTH!!!\n'); 
		return; 
	end 
	for i = 1: length(coef_current) 
	   if ((data_index -i+1)>0 & (data_index - i+1)<=data_length) 
	      sti_current(i,1) = int_sti(data_index - i+1); 
	   end 
	end 
	 
	outindex= data_index+1; 
	output = coef_current * sti_current; 
	% end of function simp_adaptive 
 
	function output = bi_round(data_in,LSB_RM,ORI_WIDTH, output) 
	% LSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width
	data = round (data_in / 2^LSB_RM);       
	output = bi_satu(data,0,ORI_WIDTH - LSB_RM); 
	%end of function bi_trunc_lsb 
	 
	function output = bi_trunc_lsb(data_in,LSB_RM,ORI_WIDTH, output) 
	% LSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	output = bitshift(2^ORI_WIDTH*(data_in<0) + data_in, -LSB_RM) - 2^(ORI_WIDTH-LSB_RM) *(data_in<0); 
	% end of function bi_round 
	 
	function output = bi_trunc_msb(data_in,MSB_RM,ORI_WIDTH, output) 
	% MSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	data = 2^ORI_WIDTH * (data_in < 0)+ data_in; 
	erase_num = 2^(ORI_WIDTH - MSB_RM) - 1; 
	data = bitand(data, erase_num); 
	output = data - 2^(ORI_WIDTH - MSB_RM)*(bitget(data,ORI_WIDTH - MSB_RM)); 
	%end of bi_trunc_msb 
	 
	function output = bi_satu(data_in,MSB_RM,ORI_WIDTH, output) 
	% MSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	maxdat = 2^(ORI_WIDTH - MSB_RM - 1)-1; 
	mindat = 2^(ORI_WIDTH - MSB_RM - 1)*(-1); 
	data_in(find(data_in > maxdat)) = maxdat; 
	data_in(find(data_in < mindat)) = mindat; 
	output = data_in; 
	%end of bi_satu  
         
